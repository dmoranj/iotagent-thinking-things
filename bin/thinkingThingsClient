#!/usr/bin/env node

/*
 * Copyright 2014 Telefonica Investigaci√≥n y Desarrollo, S.A.U
 *
 * This file is part of iotagent-thinking-things
 *
 * iotagent-thinking-things is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * iotagent-thinking-things is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public
 * License along with iotagent-thinking-things.
 * If not, seehttp://www.gnu.org/licenses/.
 *
 * For those usages not covered by the GNU Affero General Public License
 * please contact with::[iot_support@tid.es]
 */
'use strict';

var clUtils = require('../lib/commandLineUtils'),
    request = require('request'),
    async = require('async'),
    config = {
        host: 'localhost',
        port: 8000,
        path: '/thinkingthings/Receive',
        stackId: 'default',
        sleepTime: true
    },
    sleepConfig = {
        value: '2000',
        condition: 'WakeUp'
    },
    separator = '\n\n\t',
    stack = [],
    stackMode = false,
    coreModule = '#0,K1,30$',
    payloadContainer = 'cadena';

function sendRequest(payload) {
    var options = {
            url: 'http://' + config.host + ':' + config.port + config.path,
            method: 'POST',
            body: payloadContainer + '=' + payload,
            headers: {
                'Content-type': 'application/x-www-form-urlencoded'
            }
        };

    request(options, function (error, response, body) {
        if (error) {
            console.error('Error sending the request: %s' + error);
        } else if (response.statusCode === 200 && body) {
            console.log('Answer: %s', body);
        } else {
            console.error('Unknown status code: %d', response.statusCode);
            console.error('Error body:\n %s', JSON.stringify(body, null, 4));
        }

        clUtils.prompt();
    });
}

function genericRequest(name, module) {
    if (config.sleepTime) {
        module = module +
            sleepConfig.value + '$' +
            sleepConfig.condition + ',';
    }

    if (stackMode) {
        stack.push(module);
    } else {
        var payload = '#' + config.stackId + "," + module + coreModule;

        console.log('Sending the following ' + name + ' request [%s]', payload);
        sendRequest(payload);
    }
}

function humidity(commands) {
    var module = '#' + commands[2] + ',H1,' +
        commands[0] + ',' +
        commands[1] + ',';

    genericRequest('humidity', module);
}

function luminance(commands) {
    var module = '#' + commands[1] + ',LU,' +
        commands[0] + ',';

    genericRequest('luminance', module);
}

function battery(commands) {
    var module = '#' + commands[6] + ',B,' +
        commands[0] + ',' +
        commands[1] + ',' +
        commands[2] + ',' +
        commands[3] + ',' +
        commands[4] + ',' +
        commands[5] + ',';

    genericRequest('battery', module);
}

function gpsLocation(commands) {
    var module = '#' + commands[5] + ',GPS,'+
        commands[0] + ',' +
        commands[1] + ',' +
        commands[2] + ',' +
        commands[3] + ',' +
        commands[4] + ',';

    genericRequest('gps', module);
}

function gsmLocation(commands) {
    var module = '#' + commands[4] + ',P1,'+
        commands[0] + ',' +
        commands[1] + ',' +
        commands[2] + ',' +
        commands[3] + ',';

    genericRequest('gsm position', module);
}

function temperature(commands) {
    var module = '#' + commands[1] + ',T1,'+
        commands[0] + ',';

    genericRequest('temperature', module);
}

function genMeasure(commands) {
    var module = '#' + commands[2] + ',GM,'+
        commands[0] + ',' +
        commands[1] + ',';

    genericRequest('generic module', module);
}

function genConfiguration(commands) {
    var module = '#' + commands[2] + ',GC,'+
        commands[0] + ',' +
        commands[1] + ',';

    genericRequest('generic configuration attribute', module);
}

function blackButonSync(commands) {
    var module = '#' + commands[2] + ',BT,S,'+
        commands[0] + ',' +
        commands[1] + ',';

    genericRequest('Black Button Synchronous call', module);
}

function blackButonCreate(commands) {
    var module = '#' + commands[2] + ',BT,C,'+
        commands[0] + ',' +
        commands[1] + ',';

    genericRequest('Black Button create', module);
}

function blackButonPolling(commands) {
    var module = '#' + commands[1] + ',BT,P,'+
        commands[0] + ',';

    genericRequest('Black Button polling', module);
}

function blackButonClose(commands) {
    var module = '#' + commands[1] + ',BT,X,'+
        commands[0] + ',';

    genericRequest('Black Button polling', module);
}

function setConfig(commands) {
    config.host = commands[0];
    config.port = commands[1];
    config.path = commands[2];
    config.stackId = commands[3];
    config.sleepTime = JSON.parse(commands[4]);
    clUtils.prompt();
}

function getConfig(commands) {
    console.log('Current config parameters:\n');
    console.log('* host: %s', config.host);
    console.log('* port: %s', config.port);
    console.log('* path: %s', config.path);
    console.log('* stackId: %s\n', config.stackId);
    clUtils.prompt();
}

function setSleep(commands) {
    sleepConfig.value = commands[0];
    sleepConfig.condition = commands[1];
    clUtils.prompt();
}

function getSleep(commands) {
    console.log('Default sleep parameters:\n');
    console.log('* value: %s', sleepConfig.value);
    console.log('* condition: %s\n', sleepConfig.condition);
    clUtils.prompt();
}

function changePayloadContainer(commands) {
    console.log('Changing payload container to: %s\n', commands[0]);
    payloadContainer = commands[0];


    clUtils.prompt();
}

function startStack() {
    stackMode = true;
    stack = [];
    console.log('Starting stack');
    clUtils.prompt();
}

function sendStack() {
    function concat(previous, current) {
        return previous + current;
    }

    var payload = '#' + config.stackId + "," + stack.reduce(concat)  + coreModule;
    stackMode = false;

    console.log('Sending the following stacked payload: ' + payload);

    sendRequest(payload);
    clUtils.prompt();
}

var commands = {
    'humidity': {
        parameters: ['temperature', 'pressure', 'moduleId'],
        description: '\tSend a new humidity measure',
        handler: humidity
    },
    'gps': {
        parameters: ['latitude', 'longitude', 'speed', 'orientation', 'altitude', 'moduleId'],
        description: '\tSend a new gps measure',
        handler: gpsLocation
    },
    'gsm': {
        parameters: ['mcc', 'mnc', 'cell-id', 'lac', 'dbm'],
        description: '\tSend new GSM positioning data/measure',
        handler: gsmLocation
    },
    'temperature': {
        parameters: ['temperature', 'moduleId'],
        description: '\tSend a new temperature measure',
        handler: temperature
    },
    'luminance': {
        parameters: ['luminance', 'moduleId'],
        description: '\tSend a new luminance measure',
        handler: luminance
    },
    'battery': {
        parameters: ['voltage', 'state', 'charger', 'charging', 'mode', 'disconnection', 'moduleId'],
        description: '\tSend a new battery measure',
        handler: battery
    },
    'genMeasure': {
        parameters: ['attribute', 'value', 'moduleId'],
        description: '\tSend a new generic measure',
        handler: genMeasure
    },
    'genConfig': {
        parameters: ['attribute', 'value', 'moduleId'],
        description: '\tSend a new generic configuration attribute',
        handler: genConfiguration
    },
    'setConfig': {
        parameters: ['host', 'port', 'path', 'stackId', 'sleepTime'],
        description: '\tChange the configuration of the device. The sleepTime parameter is a boolean flag that' +
            'can be used to remove the -1$ parameters in all the modules, but the Core one.',
        handler: setConfig
    },
    'getConfig': {
        parameters: [],
        description: '\tRead the current configuration.',
        handler: getConfig
    },
    'setSleep': {
        parameters: ['value', 'condition'],
        description: '\tSet the default sleep parameters.',
        handler: setSleep
    },
    'getSleep': {
        parameters: [],
        description: '\tGet the current default sleep parameters.',
        handler: getSleep
    },
    'btCreate': {
        parameters: ['action', 'extra', 'moduleId'],
        description: '\tCreate a new Black Button request.',
        handler: blackButonCreate
    },
    'btPolling': {
        parameters: ['requestId', 'moduleId'],
        description: '\tCreate a new Black Button polling request.',
        handler: blackButonPolling
    },
    'btClose': {
        parameters: ['requestId', 'moduleId'],
        description: '\tCreate a new Black Button close request.',
        handler: blackButonClose
    },
    'btSync': {
        parameters: ['action', 'extra', 'moduleId'],
        description: '\tSend a new synchronous operation to the server.',
        handler: blackButonSync
    },
    'startStack': {
        parameters: [],
        description: '\tStart stacking the payloads to send a multimodule payload (stackMode = off).',
        handler: startStack
    },
    'sendStack': {
        parameters: [],
        description: '\tSend all the stacked module info (stackMode = on).',
        handler: sendStack
    },
    'changePayloadContainer': {
        parameters: ['newAttribute'],
        description: '\tChange the standard "cadena" payload attribute to a different one.',
        handler: changePayloadContainer
    }
};

clUtils.initialize(commands, 'Thinking Things Test> ');